// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonShop.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "CommonShop.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CommonShopRoot

@implementation CommonShopRoot

@end

#pragma mark - CommonShopRoot_FileDescriptor

static GPBFileDescriptor *CommonShopRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ChatMsg

@implementation ChatMsg

@dynamic hasTalker, talker;
@dynamic hasContent, content;
@dynamic hasMsgType, msgType;
@dynamic hasReceiveWxId, receiveWxId;
@dynamic hasThImgVideo, thImgVideo;
@dynamic hasVideolength, videolength;
@dynamic hasCreateTime, createTime;

typedef struct ChatMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgType;
  int32_t videolength;
  NSString *talker;
  NSString *content;
  NSString *receiveWxId;
  NSString *thImgVideo;
  int64_t createTime;
} ChatMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "talker",
        .dataTypeSpecific.className = NULL,
        .number = ChatMsg_FieldNumber_Talker,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatMsg__storage_, talker),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = ChatMsg_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatMsg__storage_, content),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.className = NULL,
        .number = ChatMsg_FieldNumber_MsgType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatMsg__storage_, msgType),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "receiveWxId",
        .dataTypeSpecific.className = NULL,
        .number = ChatMsg_FieldNumber_ReceiveWxId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatMsg__storage_, receiveWxId),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thImgVideo",
        .dataTypeSpecific.className = NULL,
        .number = ChatMsg_FieldNumber_ThImgVideo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatMsg__storage_, thImgVideo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "videolength",
        .dataTypeSpecific.className = NULL,
        .number = ChatMsg_FieldNumber_Videolength,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ChatMsg__storage_, videolength),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = ChatMsg_FieldNumber_CreateTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ChatMsg__storage_, createTime),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatMsg class]
                                     rootClass:[CommonShopRoot class]
                                          file:CommonShopRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatMsg__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\003\007\000\004\013\000\005\n\000\007\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Identity

@implementation Identity

@dynamic hasShopId, shopId;
@dynamic hasUserId, userId;
@dynamic hasToken, token;

typedef struct Identity__storage_ {
  uint32_t _has_storage_[1];
  int32_t shopId;
  int32_t userId;
  NSString *token;
} Identity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "shopId",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_ShopId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Identity__storage_, shopId),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Identity__storage_, userId),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_Token,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Identity__storage_, token),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Identity class]
                                     rootClass:[CommonShopRoot class]
                                          file:CommonShopRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Identity__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Operation

@implementation Operation

@dynamic hasCmd, cmd;
@dynamic hasData_p, data_p;

typedef struct Operation__storage_ {
  uint32_t _has_storage_[1];
  int32_t cmd;
  NSString *data_p;
} Operation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cmd",
        .dataTypeSpecific.className = NULL,
        .number = Operation_FieldNumber_Cmd,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Operation__storage_, cmd),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = Operation_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Operation__storage_, data_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Operation class]
                                     rootClass:[CommonShopRoot class]
                                          file:CommonShopRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Operation__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
